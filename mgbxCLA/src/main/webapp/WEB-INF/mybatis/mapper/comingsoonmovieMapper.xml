<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="soonmovie">
	
	<select id="listShowingMovie" parameterType="map" resultType="com.sp.movie.comingsoon.Movie">
		SELECT m.movieCode, movieNm, audits, thumbNail, TO_CHAR(startDate, 'YYYY.MM.DD') startDate, ROUND(startDate-sysdate) dDay
		FROM movie m 
		WHERE startDate > SYSDATE
		<if test="offset != '' and offset != null">
			OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
		</if>
	</select>
	 
	<select id="movieDetail" parameterType="Integer" resultType="com.sp.movie.comingsoon.Movie">
		SELECT movieCode, movieNm, audits, thumbNail, movieStory,
			 TO_CHAR(startDate,'YYYY.MM.DD') startDate, TO_CHAR(endDate, 'YYYY.MM.DD') endDate
		FROM movie
		WHERE movieCode=#{movieCode}
	</select>
	 
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM movie m
	</select>
	   
	
	<select id="listReply" parameterType="map" resultType="com.sp.movie.comingsoon.Movie">
		SELECT r.movieCode, r.userId, r.content, TO_CHAR(r.created, 'YY.MM.DD') created, s.movieScores,
				(select count(*) from moviereplyLike MRL where r.movieCode = MRL.movieCode and r.userId = MRL.userId) likeCount
		FROM moviereply r
		JOIN movieScore s on s.movieCode = r.movieCode AND r.userid = s.userid
		WHERE r.movieCode= #{movieCode}
		ORDER BY r.created DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM movieReply where movieCode=#{movieCode}
	</select>
	
	<insert id="insertReply" parameterType="com.sp.movie.comingsoon.Movie">
		INSERT INTO movieReply(movieCode, userId, content, created) values(#{movieCode}, #{userId}, #{content}, sysdate)
	</insert>
	
	<delete id="deleteMovieReply" parameterType="map">
		delete FROM movieReply where movieCode=#{movieCode} and userId=#{userId}
	</delete>
	
	<delete id="deleteLikeCount" parameterType="map">
		delete from movieReplyLike 
		WHERE movieCode=#{movieCode}
		AND userId= #{userId}
	</delete>
	
	<delete id="deleteReportUserId" parameterType="map">
		delete from movieReport 
		WHERE movieCode=#{movieCode}
		AND userId= #{userId}
	</delete>
	
	<update id="updateReply" parameterType="map">
		update movieReply set content = #{content} where movieCode=#{movieCode} and userId=#{userId}
	</update> 
	
	<insert id="ReplyLike" parameterType="map">
		INSERT INTO movieReplyLike(movieCode, userId, likeUserId)
			VALUES(#{movieCode}, #{userId}, #{likeUserId})
	</insert>
	
	<!-- 좋아요 개수 -->
	<select id="replyLikeCount" parameterType="map" resultType="Integer">
		select COUNT(likeuserId) likeUserId From movieReplyLike
		 WHERE movieCode = #{movieCode}
		 AND userId= #{userId}
	</select>
	
	<select id="checkData" parameterType="map" resultType="Integer">
		select count(*) cnt from movieReplyLike
		WHERE movieCode=#{movieCode}
		AND userId= #{userId}
		AND likeUserId = #{likeUserId}
	</select>
	
	<insert id="insertReport" parameterType="map">
		insert into movieReport(reportUserId, userId, movieCode)
		 	VALUES( #{reportUserId}, #{userId}, #{movieCode} )
	</insert>
	
	<select id="countReportUserId" parameterType="map" resultType="Integer">
		select Count(userId) from moviereport
		where movieCode= #{movieCode} and userId= #{userId}
		group by userId
	</select>
	
	
	
</mapper>